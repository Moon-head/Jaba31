package by.kremen.theatre.controller;

import by.kremen.theatre.model.Performance;
import by.kremen.theatre.model.User;
import by.kremen.theatre.model.Role;
import by.kremen.theatre.repository.PerformanceRepository;
import by.kremen.theatre.repository.UserRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.core.annotation.AuthenticationPrincipal;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestParam;

import java.util.List;

@Controller
public class MainController {
    @Autowired
    // This means to get the bean called userRepository // Which is auto-generated by Spring, we will use it to handle the data
    private UserRepository userRepository;

    @Autowired
    private PerformanceRepository performanceRepository;

    private static final org.slf4j.Logger log = org.slf4j.LoggerFactory.getLogger(MainController.class);

    @GetMapping("/")
    public String welcome(Model model) {
        return "welcome";
    }


    @GetMapping("/main")
    public String main(@AuthenticationPrincipal User user, Model model) {
        model.addAttribute("user", userRepository.findByUsername(user.getUsername()));
        model.addAttribute("users", userRepository.findAll());
        model.addAttribute("performances", performanceRepository.findAll());
        log.info("open main");
        return "main";
    }


    @PostMapping("/main")
    public String addNewUser(@RequestParam String name, @RequestParam String password, @RequestParam String email, Model model) {
        // @ResponseBody means the returned String is the response, not a view name
        // @RequestParam means it is a parameter from the GET or POST request

        User n = new User();//(name, password, role, email);
        n.setUsername(name);
        n.setPassword(password);
        n.setRole(Role.USER);
        n.setEmail(email);
        userRepository.save(n);
        model.addAttribute("users", userRepository.findAll());
        log.info("added new user");
        return "main";
    }

    @PostMapping("filter")
    public String filter(@RequestParam String filter, Model model) {
        if (filter != null && !filter.isEmpty())
            model.addAttribute("users", userRepository.findByUsername(filter));
        else
            model.addAttribute("users", userRepository.findAll());
        return "main";
    }

    @PostMapping("/search")
    public String search(@RequestParam String title, Model model) {
        List<Performance> performances = null;
        if (title != null && !title.isEmpty()) {
            log.info("search peformances by title");
            performances = performanceRepository.findAllByTitle(title);
        } else {
            log.info("wrong title, return all peformances");
            performances = performanceRepository.findAll();
        }
        if (performances == null) {
            log.error("No performances with such title");
            model.addAttribute("message", "No performances with such title");
            return "/main";
        } else {
            log.info("going to searchPerformances");
            model.addAttribute("performances", performances);
            return "searchPerformances";
        }
    }
}


